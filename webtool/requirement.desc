# 代码评审PE调试工具需求文档

## 1. 概述

### 1.1 项目结构

主入口为index.html，css写入style.css，javascript写入多个独立的js文件。整个项目使用Visual Studio Light风格。

### 1.2 JavaScript规范

- 使用Axios库发送AJAX请求，通过CDN方式引入
- 函数参数过多时，采用对象参数形式
- 采用export/import模式组织代码，由script.js统一调用
- 保持Import的精简，移除不必要的import

### 1.3 页面结构

- 页面采用左右结构，各占50%空间
- 左侧和右侧区域之间设置明显的分界线

### 1.4 页面左侧

左侧区域从上至下分为多个Section，每个Section包含标题。Section顺序如下：

1. Endpoint配置
2. Gitlab配置
3. 规则配置
4. Toolbar
5. 系统提示词
6. 项目描述
7. 数据库表结构
8. 重难点介绍
9. 你的规范
10. 输出格式要求
11. 你的任务
12. 输出要求
13. ButtonRow

Section特性：
- 每个Section前有复选框，勾选则启用，否则不生效
- "Endpoint配置"、"Gitlab配置"、"规则配置"和"系统提示词"的复选框默认勾选且不可取消
- 未选中的Section折叠显示，仅显示标题，但保留控件值
- 除"Endpoint配置"、"Gitlab配置"、"规则配置"、"系统提示词"、"输出要求"和"ButtonRow"外，其他Section（包括自定义配置Section）可通过拖动标题调整顺序
- 左侧所有输入数据需在Local Storage中持久化，刷新页面不丢失数据

### 1.5 页面右侧

右侧区域采用Tab形式，包含两个Tab：

1. 执行进度
2. 评审报告

特性：
- 点击"执行代码评审"时，切换到"执行进度"Tab，显示进度信息、summary和tasks section
- 获取report url后，进度信息显示"已获取到报告"，切换到"评审报告"Tab显示报告
- 收到report url后，刷新summary和task sections再打开report
- "执行进度"和"评审报告"页面内容互斥显示
- 当前选中的Tab使用明显样式
- "执行进度"和"评审报告"下的信息不需要Local Storage持久化
- 当没有配置Gitlab地址时，右侧"执行进度"部分应显示提示信息"请先完成Gitlab配置，然后可进入下一步操作"。该消息应居中显示，并仅在Gitlab信息未配置或配置不正确时出现。

### 1.6 页面初始化

- 页面打开时，默认仅显示"Endpoint配置"和"Gitlab配置"Section，其他Section（包括ButtonRow）不显示
- 从Local Storage读取数据后，如Gitlab地址有数据且Access Token已配置（未启用或启用且有值），则执行section_action.js中的refresh_rules函数，同时通过showInfoDialog显示标题为"信息"、内容为"加载规则中..."的对话框
- refresh_rules处理完毕后关闭对话框，显示其他所有Section（包括按钮行）
- "Endpoint配置"和"Gitlab配置"Section始终显示，不会消失
- 当Gitlab地址为空时，隐藏"Endpoint配置"和"Gitlab配置"以外的所有Section，包括ButtonRow
- 根据URL参数初始化规则下拉框的选中项，并初始化界面上数据

## 2. 左侧Section

### 2.1 左侧Section样式要求

- Section设计为带边框区域，复选框位于边框外侧
- 标题与边框之间设置适当且上下相等的内边距
- 鼠标悬停在Section标题上时，光标变为指针形状
- 文本区域高度设置为6行文本

### 2.2 Endpoint配置Section

包含以下字段：
- Endpoint：文本输入框
- API Key：文本输入框，后跟复选框表示是否启用，默认不启用
- 模型：下拉框，选项包括：
  - Claude3.5 Sonnet (value: claude3.5-sonnet)
  - Claude3 Opus (value: claude3-opus)
  - Claude3 Sonnet (value: claude3-sonnet)
  - Claude3 Haiku (value: claude3-haiku)

每个字段后添加问号图标，鼠标悬停时显示相应的tooltip信息。

API Key的特殊处理：
- 当API Key未启用时，输入框中显示"不需要填写API Key"
- 当API Key启用时，输入框的Placeholder显示"请填写API Key"

### 2.3 Gitlab配置Section

- 标题右侧添加"编辑"按钮，点击后打开"修改Gitlab信息Dialog"
- "Gitlab地址"、"Access Token"和"Branch"纯文本显示
- "Access Token"保留密码切换功能，可在明文和密文之间切换显示
- 标题部分使用flex布局，使"编辑"按钮位于右侧
- "编辑"按钮应为H2标签的一部分，H2使用flex布局
- "编辑"按钮垂直居中对齐
- "Gitlab地址"、"Access Token"和"Branch"行的文字应扩展至整行，帮助图标位于右侧
- 配置Access Token时显示"****"，未配置时显示"未配置"

每个字段后添加问号图标，鼠标悬停时显示相应的tooltip信息。

### 2.4 规则配置Section

上部分：
- 触发事件：单选项，选项为merge_request/push，默认为merge_request
- 规则：下拉框，后跟"刷新按钮"和"新规则"按钮
- 目标文件清单：文本输入框
- 类型：单选框，选项为Whole repo/Files/Diffs
- 二次检查：复选框，标签为"启用"，默认不选中
- Commit ID：字符串输入框，仅在类型为Whole repo时显示
- From Commit ID：字符串输入框，仅在类型为Files/Diffs时显示
- To Commit ID：字符串输入框，仅在类型为Files/Diffs时显示

上下两部分之间设置明显的分界线。

每个字段后添加问号图标，鼠标悬停时显示多行提示信息。

Commit ID规范：
- 留空表示指定分支下最新的commit id
- 1或first表示指定分支下首个commit id

### 2.5 内置Section信息

内置Section的顺序如下：系统提示词、项目描述、数据库表结构、重难点介绍、你的规范、你的任务、输出格式要求、其他要求、输出要求

### 2.6 输出要求Section

- 不可移动，鼠标悬停在标题上不显示指针
- 直接纳入"提示词"和"提示词模板"末尾，不转换为{{xxx}}形式

### 2.7 自定义配置Section

- 配置名称：字符串输入框，默认为空
- 引导语：字符串输入框，默认为空
- value：多行字符串输入框，默认为空
- 新创建时标题为"新配置"，之后随配置名称变化
- 包含删除按钮，可删除整个Section

### 2.8 新增规则对话框

- 对话框标题：新增规则
- 内容：规则名称和文件名称输入框
- 底部按钮：确认、取消
- 点击任意按钮关闭对话框
- 规则名称和文件名称为必填项
- 文件名称必须以".yaml"结尾
- 文件名称不能与现有规则重复
- 点击确认按钮时验证字段规则，验证失败在对话框中显示错误提示
- 按钮右对齐
- 点击确认后，向"规则下拉框"中追加一条记录，text为"规则名称"，value为"文件名称"，并切换到这个新增的选项

### 2.9 ButtonRow

- 按钮栏包含左侧和右侧按钮，所有按钮位于同一行
- 最左侧按钮为"增加配置"

## 3. Toolbar

### 3.1 Toolbar结构

Toolbar位于左侧区域，位于"规则配置"Section之后，"系统提示词"Section之前。Toolbar采用Section相同的样式，但不包含标题，且不可移动。Toolbar左侧应设置与其他Section相同的复选框。

### 3.2 Toolbar布局

Toolbar内部采用两端对齐布局，部分控件靠左对齐，部分控件靠右对齐。Toolbar应设置适当的内边距（Padding）。

### 3.3 Toolbar左侧项目

左侧包含一个Clear按钮：
- 使用images/clear.svg图标
- 按钮尺寸设计为32x32像素，内部图标尺寸为16x16像素

### 3.4 Toolbar右侧项目

右侧包含以下控件：

1. 模板下拉框
2. 导出按钮
3. Help按钮

### 3.5 模板下拉框行为

模板下拉框的行为包括切换到"自定义"选项和其他模板选项时的操作。模板数据来源于服务器端的YAML资源文件，包括all、diff和single三种类型。当"类型"发生切换时，系统将根据对应类型的模板数据初始化下拉框内容。

### 3.6 Export按钮功能

点击Export按钮后，系统将收集相关Section数据，组织成JSON格式，并复制到剪贴板。

### 3.7 Clear按钮功能

点击Clear按钮后，系统将执行一系列清理操作，包括恢复表单初始状态和清空Local Storage数据。

## 4. ButtonRow

### 4.1 ButtonRow结构

ButtonRow位于左侧区域的最下方，采用单行布局，包含左侧和右侧按钮。ButtonRow不可移动，且无需复选框。

### 4.2 左侧按钮

左侧包含一个"增加配置"按钮，点击后在"输出要求"Section之前添加一个"自定义配置"Section。

### 4.3 右侧按钮

右侧包含"查看提示词"、"保存提示词"和"执行代码评审"按钮。

### 4.4 Dialog样式要求

所有Dialog应遵循统一的样式要求，包括最小宽度、内容区域滚动、按钮固定等。

### 4.5 执行代码评审流程

点击"执行代码评审"按钮后，系统将执行一系列操作，包括发送请求、处理响应、轮询结果等。发送POST请求时，需要将当前选中的规则名称（rule name）和二次检查状态（confirm）一并传递，字段名称分别为rule_name和confirm。

### 4.6 提示词计算规则

系统应按照特定规则生成提示词，包括基本结构和生成规则。

### 4.7 YAML格式提示词生成

系统应实现generatePromptYaml函数，生成YAML格式的提示词。生成的YAML文件中应包含一个名为order的key，其value是所有section的name通过逗号串联而成。此外，还应包含一个名为confirm的key，用于标识二次检查的状态。

### 4.8 保存提示词功能

当用户点击"保存提示词"按钮时，系统应执行一系列操作，包括弹出对话框、发送请求等。

## 5. 进度计算

### 5.1 进度信息获取与展示

系统通过特定步骤获取和展示进度信息，包括发送请求、解析响应、显示信息等。在执行代码评审的POST请求响应中，系统将获取一个commit_id，并将其设置到隐藏域code-review-commit-id中。后续请求结果时，使用该commit_id作为参数。

### 5.2 Summary Section处理

Summary Section的显示内容根据获取tasks的情况进行调整。

### 5.3 Task Section处理

每个Task Section应包含特定内容，并根据succ字段值显示不同信息。

### 5.4 进度信息变化说明

进度信息的显示和变化遵循特定规则，包括位置、更新方式、显示顺序等。

### 5.5 任务统计信息

在summary信息下方，系统应显示任务统计信息，包括最早开始时间、最晚结束时间和总任务执行时长。

### 5.6 用户提示词处理

在"执行进度"Tab中，对于"用户提示词"的显示需要特殊处理：

- 如果"用户提示词"是一个数组，系统应按照以下格式在多行文本输入框中显示：
  - 数组中的每个元素占据一行
  - 元素之间使用连续的短横线（-）作为分隔符
  - 分隔符应单独占据一行，并且长度为50个短横线

例如，如果"用户提示词"是[a, b, c, d]，则显示格式如下：

```
a

--------------------------------------------------

b

--------------------------------------------------

c

--------------------------------------------------

d
```

## 6. 其他功能

### 6.1 拷贝到剪贴板功能

页面上所有的"拷贝到剪贴板"功能应显示一个会自动消失的提示窗口。

### 6.2 模板初始化

系统应在页面加载时请求多个YAML资源地址，每个地址对应一种类型（diff，single，all）。获取的数据用于填充"模板"下拉框，并在切换模板时初始化各个section的数据。

### 6.3 响应式设计

页面应使用响应式布局设计，窗口最小宽度设为1200px。标题应始终水平居中显示在页面顶部。

### 6.4 Local Storage初始化

系统应根据URL中的session参数来保存Local Storage数据，默认session为"default"。当Local Storage中有值时，系统应使用Local Storage的数据；否则，使用预设的初始数据。

### 6.5 页面微调

系统应进行一些页面微调，包括报告展示、标题样式、错误信息显示等。

### 6.6 规则配置功能优化

系统应优化规则配置功能，包括刷新规则、错误处理等。规则应通过URL的参数进行传递，进入页面时应根据URL参数初始化规则下拉框的选中项，并初始化界面上数据。允许规则下拉框为空的情况，但应妥善处理相关错误。

### 6.7 对话框功能优化

系统应为各种对话框提供统一的HTML结构和样式，并实现相应的显示和隐藏方法。

### 6.8 Gitlab信息编辑功能

系统应在"Gitlab配置"Section中添加编辑功能，允许用户修改Gitlab相关信息。

### 6.9 全局变量管理

系统应在variable.js文件中定义全局变量，用于存储规则数据。

### 6.10 规则配置Section优化

系统应优化规则配置Section的功能，包括数据初始化和section初始化。

### 6.11 YAML解析规则优化

系统应实现formatYamlValue函数，用于处理YAML值的格式化。如果rule中第一行不是以冒号结尾，那就视为没有guide，此时section的guide字段应该为空，而不是用默认的guide。

### 6.12 错误处理优化

系统应实现handleErrorMessage函数，用于处理AJAX请求中的错误信息。

### 6.13 Section变化高亮效果

系统应实现highlightElement函数，为发生变化的Section添加高亮动画效果。

### 6.14 刷新数据功能

在没有配置好或规则刷新失败时，左侧底部会显示一个"刷新数据"按钮。点击该按钮会触发"刷新规则"的逻辑，刷新前会判断Endpoint、Gitlab信息填写的情况，未填写齐全则报错。"请先完成Gitlab配置，然后可进入下一步操作"的信息将与"刷新数据"按钮同时显示或消失。

### 6.15 类型映射

系统应实现一个全局映射表，用于映射界面上的"类型"和服务器上的类型。

### 6.16 Section初始化

系统应实现一个名为initializeSections(rule)的方法，用于统一完成Section的初始化。该方法应用于切换"规则"和切换"模板"时初始化数据。初始化流程包括：
- 清理操作：除Endpoint配置、Gitlab配置、Toolbar外，取消所有Section的checkbox，移除自定义section
- 计算显示字段和顺序：优先使用rule.order，否则"system第一，其余按照rule字段顺序"
- 按顺序加载各section数据，处理value和guide
- 对于自定义Section，正确处理配置名称、引导语和值

### 6.17 bedrock_prompt字段处理

系统应对bedrock_prompt字段进行特殊处理：
- 判断bedrock_prompt字段是否为JSON格式的数组
- 如果是JSON数组，则解析为数组对象
- 解析后的数组对象用于后续处理，如显示用户提示词等

## 7. Help Dialog

### 7.1 Help Dialog基本要求

Help Dialog应采用翻页模式，包含页码信息、"启动时显示"复选框等功能。底部翻页和页码需要居中显示。

### 7.2 Help Dialog内容

Help Dialog应包含以下页面内容：

1. 第1页 - 使用说明：
   - 简单使用：描述基本使用步骤
   - Demo Endpoint：提供示例Endpoint信息
   - 异常说明：解释可能出现的异常情况及解决方案

2. 第2页 - 小技巧：
   - 介绍使用内置模板简化操作的方法
   - 说明模块可通过拖动标题调整顺序
   - 解释如何从进度信息中拷贝"用户提示词"至BRClient运行
   - 说明如何从进度信息中拷贝"Bedrock Payload"用于API调用
   - 介绍二次检查功能及其使用场景

3. 第3页 - Demo演示：
   - 嵌入guide.mp4视频，展示工具的使用演示